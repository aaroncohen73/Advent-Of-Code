This was a fairly easy first puzzle. Though I felt bad brute forcing combinations since it wouldn't
scale well to larger lists of numbers (I get the feeling there's probably a more elegant solution
lurking somewhere that involves a binary tree search), I'm happy with the solution I wrote. It's not
quite a brute force search, since there is some narrowing of the search space done in both find_pair
and find_triplet. In find_pair, the obviously wrong answers are found by using the fact that if
you're finding 2 numbers that sum to 2020, one of them will be <= 1010 and one of them will be >= 1010.
In find_triplet, the method used to eliminate these obviously wrong answers is done by summing the
first two and then last two elements of the sorted array. The third number cannot be larger than
2020 - nums[0] - nums[1], and cannot be smaller than 2020 - nums[199] - nums[198]. Although the
"cannot be smaller" bound doesn't contribute to narrowing the search space with this particular list
of inputs, I think that for a general solution to the problem it's good to have.
